{"pageProps":{"post":{"title":"Pythonのパッケージ管理メモ","date":"2023-02-25","slug":"python-package","content":"<h2 id=\"概要\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#概要\"><span class=\"icon icon-link\"></span></a>概要</h2>\n<p>いつも研究で使ってるPythonのパッケージ管理について整理してみた。</p>\n<h2 id=\"pipとvenv\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pipとvenv\"><span class=\"icon icon-link\"></span></a>pipとvenv</h2>\n<p>pipはPython3.4以降に標準で付属しているパッケージ管理ツール。</p>\n<p>venvはパッケージ管理のための仮想環境構築ツール。こちらも標準で付属している。</p>\n<h2 id=\"仮想環境を作る\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#仮想環境を作る\"><span class=\"icon icon-link\"></span></a>仮想環境を作る</h2>\n<p>仮想環境を作りたいディレクトリで、以下のコマンドを実行したらできる。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python -m venv .venv\n</code></pre>\n<p>実行後は、</p>\n<pre><code>.venv/bin, .venv/include, .venv/lib, .venv/pyvenv.cfg\n</code></pre>\n<p>というふうにディレクトリとファイルが構成される。</p>\n<p>binとlibには文字通りバイナリとライブラリが入り、pyvenv.cfgにはPythonのバージョンなどの記載がされる。</p>\n<h2 id=\"仮想環境の起動と停止\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#仮想環境の起動と停止\"><span class=\"icon icon-link\"></span></a>仮想環境の起動と停止</h2>\n<p>起動</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> .venv/bin/activate\n</code></pre>\n<p>停止</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">deactivate\n</code></pre>\n<h2 id=\"requirementstxtを使って依存関係をチームで管理する\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#requirementstxtを使って依存関係をチームで管理する\"><span class=\"icon icon-link\"></span></a>requirements.txtを使って依存関係をチームで管理する</h2>\n<p>requirements.txtは、仮想環境内で使っているライブラリの名前とバージョンが記載されたもの。\nnode.jsでいうところのpackage.jsonに近い。</p>\n<p>たとえば、numpyをインストールしたあとに<code>pip list</code>した結果は以下のようになる。</p>\n<pre><code>Package    Version\n---------- -------\nnumpy      1.24.2\npip        22.0.4\nsetuptools 58.1.0\n</code></pre>\n<p>続けてコマンドを叩くと、これらの情報がrequirements.txtに書き込まれる。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> ./requirements.txt\n</code></pre>\n<p>requirements.txtの中身はこんな感じ。</p>\n<pre><code>numpy==1.24.2\n</code></pre>\n<p>他の環境で作業するときは、<code>pip install -r requirements.txt</code>とコマンドを叩くと、環境を再現できる。</p>\n<h2 id=\"細かい点\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#細かい点\"><span class=\"icon icon-link\"></span></a>細かい点</h2>\n<h3 id=\"requirementstxt更新の自動化\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#requirementstxt更新の自動化\"><span class=\"icon icon-link\"></span></a>requirements.txt更新の自動化</h3>\n<p>requirements.txtは、<code>pip install</code>しただけで更新されない。\n毎度<code>pip freeze</code>するのは手間だし忘れやすいので、自分はgit hooksを使って以下のスクリプトを走らせている。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> rev-parse --show-toplevel<span class=\"token variable\">)</span></span> <span class=\"token comment\"># リポジトリのrootディレクトリに移動</span>\n<span class=\"token builtin class-name\">source</span> .venv/bin/activate\n\npip freeze <span class=\"token operator\">></span> ./requirements.txt\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> requirements.txt\n</code></pre>\n<p>なお、git hooksの設定は<a href=\"https://astatsuya.medium.com/githooks%E3%81%AEpre-push%E3%82%92%E5%85%B1%E6%9C%89%E3%81%97%E3%81%A6%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E5%81%A5%E5%85%A8%E3%81%AB%E4%BF%9D%E3%81%A4-7156def39b64\">この記事</a>が参考になった。</p>\n<h3 id=\"pip-freeze---all\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pip-freeze---all\"><span class=\"icon icon-link\"></span></a>pip freeze --all</h3>\n<p><code>pip freeze --all</code>を実行すると、自らインストールしたライブラリが依存しているパッケージのバージョンについても書き出される。\nnode.jsでいうpackage-lock.jsonに近い。</p>\n<p><code>pip freeze</code>をそのまま実行するよりも依存関係を厳密に管理できる。</p>","tags":["Python","pip"]}},"__N_SSG":true}